// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originMfgID = accounts[0]
    const originMfgName = "Widget Factory"
    const originMfgInformation = "Manufacturing the Best Widgets on the Planet"
    const originMfgLatitude = "-38.239770"
    const originMfgLongitude = "144.341490"
    var productID = sku + upc
    const serialNum = "Test Serial Number"
    const productNotes = "Best Laminator on the Market"
    const productPrice = web3.toWei(1, "ether")
    var itemState = 0
    const sellerID = accounts[0]
    const srvID = accounts[3]
    const consumerID = accounts[2]
    const emptyAddress = '0x0000000000000000000000000000000000000000'
    const srvUsage = 100
    const probNotes = "Machine if freezing after 3 uses.  After restarting, machine works again."
    const srvNotes = "Reset Machine Firmware.  Retested 10 cycles.  Problem not found."
    const repaired = 0
    const EOL = 1

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner:", ownerID)
    console.log("Mfg: ", originMfgID)
    console.log("Seller: ", sellerID)
    console.log("Service Provider: ", srvID)
    console.log("Consumer: ", consumerID)

    // 1st Test
    it("Testing smart contract function manufactureItem() that allows a Mfg to create a new unit", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Manufactured()
        var event = supplyChain.Manufactured()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Manufactured by calling function manufactureItem()
        await supplyChain.manufactureItem(upc, originMfgID, originMfgName, originMfgInformation, originMfgLatitude, originMfgLongitude, productNotes, serialNum, {from: originMfgID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originMfgID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originMfgID, 'Error: Missing or Invalid originMfgID')
        assert.equal(resultBufferOne[4], originMfgName, 'Error: Missing or Invalid originMfgName')
        assert.equal(resultBufferOne[5], originMfgInformation, 'Error: Missing or Invalid originMfgInformation')
        assert.equal(resultBufferOne[6], originMfgLatitude, 'Error: Missing or Invalid originMfgLatitude')
        assert.equal(resultBufferOne[7], originMfgLongitude, 'Error: Missing or Invalid originMfgLongitude')
        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid product ID')
        assert.equal(resultBufferTwo[10], serialNum, 'Error: Missing or Invalid Serial Number')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    //  2nd Test
    it("Testing smart contract function sellItem() that allows a Mfg to sell machine", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false        
        
        // Watch the emitted event ForSale()
        var event = supplyChain.ForSale()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc, productPrice, {from: sellerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)        

        // Verify the result set
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid Product Price')
        assert.equal(resultBufferTwo[7], sellerID, 'Error: Invalid Seller ID')
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')                  
    })    

    // 3rd Test
    it("Testing smart contract function buyItem() that allows a consumer to buy machine", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false        
        
        // Watch the emitted event Sold()
        var event = supplyChain.Sold()
        await event.watch((err, res) => {
            eventEmitted = true
        })
        
        // Mark an item as Sold by calling function buyItem()
        let balance = web3.toWei("2.05", "ether");
        await supplyChain.buyItem(upc, {from: consumerID, value: balance})     

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)        

        // Verify the result set
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid Consumer ID')
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')                          
    })    

    // 4th Test
    it("Testing smart contract function shipItem() that allows a seller to ship a machine", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false        
                
        // Watch the emitted event ShippedToConsumer()
        var event = supplyChain.ShippedToConsumer()
        await event.watch((err, res) => {
            eventEmitted = true
        })        

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.shipItem(upc, consumerID, {from: sellerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)                

        // Verify the result set
        assert.equal(resultBufferTwo[9], consumerID, 'Error: Invalid ship to ID')
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')                          
              
    })

    // 5th Test
    it("Testing smart contract function requestSrv() that allows a consumer to mark a machine as received and InOperation", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false                
        
        // Watch the emitted event Received()
        var event = supplyChain.InOperation()
        await event.watch((err, res) => {
            eventEmitted = true
        })        

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.receiveItem(upc, {from: consumerID})        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)                

        // Verify the result set
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid Consumer ID')
        assert.equal(resultBufferTwo[9], emptyAddress, 'Error: Invalid ship to ID')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')                          
    })    

    // 6th Test
    it("Testing smart contract function processItem() that allows a Consumer to request service", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false                
        
        // Watch the emitted event Processed()
        var event = supplyChain.CallOpened()
        await event.watch((err, res) => {
            eventEmitted = true
        })        

        // Mark an item as CallOpened by calling function requestSrv()
        await supplyChain.requestSrv(upc, srvID, srvUsage, probNotes, {from: consumerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)                
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc)                

        // Verify the result set
        assert.equal(resultBufferThree[3], srvID, 'Error: Invalid Service Provider ID')
        assert.equal(resultBufferThree[4], srvUsage, 'Error: Invalid service Usage')
        assert.equal(resultBufferThree[5], probNotes, 'Error: Invalid problem Notes')
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')                          
    })    

    // 7th Test
    it("Testing smart contract function packItem() that allows a Consumer to ship machine to Service Provider", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false                
        
        // Watch the emitted event Packed()
        var event = supplyChain.ShippedToSrv()
        await event.watch((err, res) => {
            eventEmitted = true
        })        

        // Mark an item as ShippedToSrv by calling function shipItemSrv()
        await supplyChain.shipItemSrv(upc, {from: consumerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)                

        // Verify the result set
        assert.equal(resultBufferTwo[9], srvID, 'Error: Invalid item Ship to ID')
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')                          
        
    })    

    // 8th Test
    it("Testing smart contract function receiveItemSrv() that allows a service provider to receive consumer item", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false                
        
        // Watch the emitted event Purchased()
        var event = supplyChain.ReceivedBySrv()
        await event.watch((err, res) => {
            eventEmitted = true
        })        

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.receiveItemSrv(upc, {from: srvID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)                

        // Verify the result set
        assert.equal(resultBufferTwo[9], emptyAddress, 'Error: Invalid item Ship to ID')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')                          
    })    

    // 9th Test
    it("Testing smart contract function repairItem() that allows a service provider to repair consumer item", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false                
        
        // Watch the emitted event Purchased()
        var event = supplyChain.UnderRepair()
        await event.watch((err, res) => {
            eventEmitted = true
        })        

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.repairItem(upc, {from: srvID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)                

        // Verify the result set
        assert.equal(resultBufferTwo[5], 8, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')                          
    })    

    // 10th Test
    it("Testing smart contract function repairComplete() that allows a service provider to mark repair complete of consumer item", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false                
        
        // Watch the emitted event Purchased()
        var event = supplyChain.Repaired()
        await event.watch((err, res) => {
            eventEmitted = true
        })        

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.repairComplete(upc, repaired, srvNotes, {from: srvID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)                
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc)                

        // Verify the result set
        assert.equal(resultBufferThree[6], srvNotes, 'Error: Invalid service Notes')
        assert.equal(resultBufferTwo[5], 9, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')                          
    })    

    // 11th Test
    it("Testing smart contract function shipItem() that allows a srv provider to ship machine back to consumer", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false        
                
        // Watch the emitted event ShippedToConsumer()
        var event = supplyChain.ShippedToConsumer()
        await event.watch((err, res) => {
            eventEmitted = true
        })        

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.shipItem(upc, consumerID, {from: srvID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)                

        // Verify the result set
        assert.equal(resultBufferTwo[9], consumerID, 'Error: Invalid ship to ID')
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')                          
    })    

    // 12th Test
    it("Testing smart contract function requestSrv() that allows a consumer to mark a machine as received and InOperation", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false                
        
        // Watch the emitted event Received()
        var event = supplyChain.InOperation()
        await event.watch((err, res) => {
            eventEmitted = true
        })        

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.receiveItem(upc, {from: consumerID})        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)                

        // Verify the result set
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid Consumer ID')
        assert.equal(resultBufferTwo[9], emptyAddress, 'Error: Invalid ship to ID')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')  
    })    

    // 13th Test
    it("Testing smart contract function repairComplete() that allows a service provider to mark machine EOL", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false                
        
        // Watch the emitted event Purchased()
        var event = supplyChain.EOL()
        await event.watch((err, res) => {
            eventEmitted = true
        })        

        // Mark an item as EOL by calling function repairComplete()
        await supplyChain.requestSrv(upc, srvID, srvUsage, probNotes, {from: consumerID})
        await supplyChain.shipItemSrv(upc, {from: consumerID})
        await supplyChain.receiveItemSrv(upc, {from: srvID})
        await supplyChain.repairItem(upc, {from: srvID})
        await supplyChain.repairComplete(upc, EOL, srvNotes, {from: srvID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)                
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc)                

        // Verify the result set
        assert.equal(resultBufferThree[6], srvNotes, 'Error: Invalid service Notes')
        assert.equal(resultBufferTwo[5], 10, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')                      
    })    

    // 14th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)        
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], srvID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originMfgID, 'Error: Missing or Invalid originMfgID')
        assert.equal(resultBufferOne[4], originMfgName, 'Error: Missing or Invalid originMfgName')
        assert.equal(resultBufferOne[5], originMfgInformation, 'Error: Missing or Invalid originMfgInformation')
        assert.equal(resultBufferOne[6], originMfgLatitude, 'Error: Missing or Invalid originMfgLatitude')
        assert.equal(resultBufferOne[7], originMfgLongitude, 'Error: Missing or Invalid originMfgLongitude')        
    })

    // 15th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)                
        
        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid product ID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid product Notes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid product price')
        assert.equal(resultBufferTwo[5], 10, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], originMfgID, 'Error: Missing or Invalid originMfgID')
        assert.equal(resultBufferTwo[7], sellerID, 'Error: Missing or Invalid sellerID')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid Consumer ID')
        assert.equal(resultBufferTwo[9], emptyAddress, 'Error: Invalid ship to ID')
        assert.equal(resultBufferTwo[10], serialNum, 'Error: Missing or Invalid Serial Number')
    })

    // 16th Test
    it("Testing smart contract function fetchItemBufferThree() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc)                
        
        // Verify the result set:
        assert.equal(resultBufferThree[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferThree[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferThree[2], productID, 'Error: Missing or Invalid product ID')
        assert.equal(resultBufferThree[3], srvID, 'Error: Invalid Service Provider ID')
        assert.equal(resultBufferThree[4], srvUsage, 'Error: Invalid service Usage')
        assert.equal(resultBufferThree[5], probNotes, 'Error: Invalid problem Notes')
        assert.equal(resultBufferThree[6], srvNotes, 'Error: Invalid service Notes')
    })

});

